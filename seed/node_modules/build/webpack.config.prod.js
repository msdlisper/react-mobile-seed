/**
 * @file --
 * @author zhangpeng
 */


var path = require('path');
const config = require('config');
const HappyPack = require('happypack');
const webpack = require('webpack');
var BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;

module.exports = {
    entry: {
        // 动态加
    },
    output: {
        filename: 'js/[name].bundle.js',
        chunkFilename: 'js/[id].[chunkhash].chunk.js',
        path: path.resolve(config.root, 'dest/prod'),
        publicPath: ''
    },
    devtool: 'inline-source-map',
    cache: true,
    module: {
        rules: [{
                test: /\.less$/,
                exclude: [
                    /\.use(able)?\.less$/
                ],
                loaders: [
                    'style-loader',
                    'css-loader',
                    'px2rem-loader?remUnit=75',
                    'less-loader'
                ]
            },
            {
                test: /\.use(able)?\.less$/,
                // exclude: /node_modules/,
                use: [
                    'style-loader/useable',
                    'css-loader',
                    'px2rem-loader?remUnit=75',
                    'less-loader'
                ]
            }, {
                test: /\.(png|svg|jpg|gif)/,
                use: [{
                    loader: 'file-loader',
                    options: {
                        name: 'images/[name].[ext]'
                    }
                }]
            }, {
                test: /\.js$/,
                // include: config.path.src,
                loader: 'babel-loader',
            }
        ]
    },
    plugins: [
        new webpack.DllReferencePlugin({
            // context: path.resolve(config.path.dll),
            manifest: require(path.resolve(config.path.dllProd, "vendor-manifest.json"))
        }),
        new webpack.optimize.CommonsChunkPlugin({
            name: 'commons',
            minChunks: function (module, count) {
                // console.log(path.join(__dirname, '../../../node_modules'), module.resource)
                return (
                    module.resource &&
                    /\.js$/.test(module.resource) &&
                    module.resource.indexOf(
                        path.join(__dirname, '../../../node_modules')
                    ) === 0
                );
            }
        }),
        new webpack.optimize.UglifyJsPlugin({
            compress: {
                warnings: false
            }
        })

    ],
    resolve: {
        // 配置别名，在项目中可缩减引用路径
        alias: {
            src: path.resolve(config.root, 'src'),
            images: path.resolve(config.root, 'src/images'),
            svg: path.resolve(config.root, 'src/svg')
        }
    }
};